import abc
from abc import abstractmethod
from typing import Any

class BaseOptions(metaclass=abc.ABCMeta):
    __metaclass__: Any
    def __init__(self) -> None: ...
    @property
    def capabilities(self): ...
    def set_capability(self, name, value) -> None: ...
    @abstractmethod
    def to_capabilities(self): ...
    @property
    @abstractmethod
    def default_capabilities(self): ...

class ArgOptions(BaseOptions, metaclass=abc.ABCMeta):
    def __init__(self) -> None: ...
    @property
    def arguments(self): ...
    def add_argument(self, argument) -> None: ...
    def to_capabilities(self): ...
